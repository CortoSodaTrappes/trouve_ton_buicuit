
########################### PENSE-BETE ###########################################


Le $ repr�sente ici le prompt de l'OS. Sous Linux et Mac c'est $, sous Windows c'est c:\>. Il ne faut pas copier $ pour ex�cuter la commande.


####### Cr�er un projet symfony 4 ########
$ composer create-project symfony/website-skeleton monprojet # Avec principales d�pendances.
ou
$ composer create-project symfony/skeleton monprojet # Nu

La console indique beaucoup de ce qu'il y a � faire par la suite.

####### Premi�re ex�cution d'un projet ########
$ cd monprojet
$ php bin/console server:run

##### Initialisation de git
$ git init

Commiter l'installation du projet
$ git add -all
$ git commit -m "Initialisation du projet monprojet

Cr�er une branche dev et s'y placer
$ git checkout -b dev

Selon les circonstances cr�er diff�rentes branches selon les fonctionnalit�s ou l'�quipe de d�veloppeurs.

$ git branch membres
$ git branch securite
$ git branch base_template
$ ...



####### Cr�ation d'un contr�leur ########
$ php bin/console make:controller
ou
$ php bin/console make:controller moncontroleur

Ceci cr�� un contr�leur et une route sous un format annotation (en commentaire juste au dessus de la m�thode). Mike conseille qu'on utilise plut�t les routes sous format yalm, dans le fichier config/routes.yaml.

Mettons que nous voulons qu'avec l'url (nom_de_domaine)/lucky, le controlleur LuckyController affiche un num�ro al�atoire dans le templante templates/lucky/number.html.twig

1. On cr�� la route dans config/routes.yalm :

lucky_number:
    path: /
    controller: App\Controller\LuckyController::number

2. On personnalise le contr�leur :

class LuckyController extends Controller
{
    public function number()
    {
        $number = random_int(0, 100);
        return $this->render('lucky/number.html.twig', array(
            'number' => $number,
        ));
    }
}

Quand on fait h�riter notre contr�leur de la classe Controller, on dispose de la m�thode $this->render().

3. On cr�� ou modifie le template par d�faut templates/lucky/number.html.twig

<h1>Your lucky number is {{ number }}</h1>


###### ROUTING ######

Les routes donnent toutes sortes de possibilit�s. Par exemple :

blog_list:
    path:     /blog
    controller: App\Controller\BlogController::list

blog_show:
    path:     /blog/{id_article}
    controller: App\Controller\BlogController::show

Une url telle que (nom_de_domaine)/blog ira sur la m�thode (en sf on parle d'actions) du contr�leur BlogController qui affiche une liste d'articles. En revanche, une url telle que (nom_de_domaine)/blog/14 ira sur la m�thode show du m�me contr�leur, qui lui affichera un article donn�. Cette m�thode recevra en argument le param�tre 'id_article'.

    public function show($id_article)
    {
        // instructions pour afficher un seul article.
    }

Pour voir les routes d�finies :

$ php bin/console debug:router

Plus d'infos sur https://symfony.com/doc/current/routing.html. Sur les exemples, il faut souvent cliquer sur l'onglet YALM.

###### CONTROLEURS ######
Doc ici : https://symfony.com/doc/current/controller.html

A noter une commande potentiellement int�ressante, qui permet de cr�er dans le contr�leur un crud (Create, Read, Update, Delete) complet d'un seul coup. Mais pour �a il faut avoir d�j� l'entit�.

$ php bin/console make:crud Monentite


########### LA BASE DE DONNEES #################

Le composant normalement utilis� pour les relations de Symfony avec la base de donn�es est Doctrine. Les coordonn�es de la base de donn�es sont normalement confifur�es dans /.env. Pour cr�er la base de donn�es depuis la ligne de commande :

$ php bin/console doctrine:database:create

S'il n'y a pas de connexion avec la base c'est peut-�tre que m�me si le serveur de sf est lanc�, il faut aussi lancer le serveur local (xampp, wamp, easyphp ou autre). Info � v�rifier.

Une entit� est une classe qui repr�sente une table dans la base de donn�es. Ses propri�t�s, priv�es, sont le pendant des champs des tables des la base, et elle contient �galement les getters et les setters associ�es. Elle comporte des annotations qui vont servir d'indications � symfony pour cr�er les tables (le mapping). En travaillant sous Symfony, on est invit�s � raisonner en termes de de classes et d'objets, et oublier que dans la base il y a des tables. Pour cr�er une entit� :

$ php bin/console make:entity

Ensuite, la console demande le nom de l'entit�, puis les noms des champs, leur type, s'il y a lieu leur taille, etc. La console donne toutes les indications pour nous guider. Ne pas faire de champ id, Doctrine le fait tout seul.

Si en cours de route on s'est tromp� et qu'on veut annuler la cr�ation de l'entit�, Ctrl+C. Ne pas oublier de supprimer les fichiers entit� et repository qui a �t� cr��s (dans /src/Entity et dans /src/Repository).

Ensuite, il faut lancer les commandes qui creent la table dans la base. La premi�re cr�� les requ�tes SQL, la seconde les ex�cute :

$ php bin/console make:migration
$ php bin/console doctrine:migrations:migrate

Si on a besoin d'ajouter des propri�t�s � une entit� d�j� cr��, on r�utilise la commande php bin/console make:entity puis les deux autres pour mettre � jour la table dans la base.

Si l'on a ajout� � la main des propri�t�s, on peut cr�er les getters et les setters d'un seul coup avec :

$ php bin/console make:entity --regenerate

Pour plus d'infos sur doctrine, taper 

$ php bin/console list doctrine

ou aller sur la doc :

https://symfony.com/doc/current/doctrine.html

On y trouvera les instructions pour enregistrer les donn�es (en symfony on dit "persister les objets"), pour les r�cup�rer, les mettres � jour et les supprimer.

La doc pour les relations :

https://symfony.com/doc/current/doctrine/associations.html


################ Les templates #########################



################### GIT ##########################

Pour un affichage d'aide en ligne de commande, taper 

$ git help

Pour un affichage d'aide sur une commande en particulier, par exemple init, taper

$ git --help init

### Uploader un d�p�t local vers GitHub

Cr�er le d�p�t sur GitHub. Normalement on y trouve les instructions n�cessaires.

Cr�er le projet en local

$ git init
$ git commit -m "first commit"
$ git remote add origin {url_depot_distant}
$ git push -u origin master


### R�cup�rer en local un d�p�t distant

1. Si on a un projet sur GitHub et qu'on veut le cloner en local, sur l'interface de GitHub, sur le d�p�t (repository) cliquer sur Cloner et r�cup�rer l'url.

2. En local, cloner avec l'url qu'on a r�cup�r� :
$ git clone {url d�p�t}

### Cr�er un d�p�t local :
Initialiser git
$ git init

S'il y a besoin de s'identifier :

$ git config --global user.name 'Prenom NOM'
$ git config --global user.email 'adresse@mail.com'

S�lectionner toutes les modifications depuis le dernier commit
$ git add --all

commiter
$ git commit -m "{message}"

Pour savoir o� on en est dans les modifications :
$ git status

Git status donne aussi des indications sur comment revenir en arri�re. Pour annuler les modifications sur des fichiers qu'on n'a pas encore s�lectionn�s (c-�-d pour lesquels on n'a pas encore fait git add) :
$ git checkout --<nom_du_fichier>

Cr�er une branche
$ git branch nom_de_la_branche

Changer de branche
$ git checkout nom_de_la_branche

Cr�er une branche et se placer dans cette branche en une seule commande :
$ git checkout -b nom_de_la_branche

Pour savoir o� on en est en mati�re de branches :
$ git branch

Pour se rappeler des commits effectu�s :
$ git log

La liste s'ach�ve avec un affichage 'END' sans retourner la main sur la ligne de commande. Pour en sortir, taper 'q'.

On a cr�� une branche mabranche � partir de master. On se situe sur machanche et on travaille dessus. Une fois que l'on a termin�, commit�, etc., on veut fusionner avec master. On se place alors sur master et effectuons la fusion. Puis, enfin, nous supprimons la branche qui ne sert pas.

$ git checkout master
$ git merge mabranche 






Pour plus d'infos sur les branches et les fusions : https://git-scm.com/book/fr/v1/Les-branches-avec-Git-Brancher-et-fusionner%C2%A0%3A-les-bases


##############################################################################################################


--- PROPOSITION DE MARCHE A SUIVRE ---
1. D�terminer fonctionnalit�s.
2. Mod�liser base de donn�es avec MySQL WorkBench.
3. Cr�er entit�s � partir de la mod�lisation de la base.
4. Cr�er une architecture de base routes/contr�leurs/templates twig � partir de php bin/console make:controller.
5. Cr�er autant que possible en dur la navigation dans le site (plus ou moins au fur et � mesure du pr�c�dent).
6. 


############################### Projet biscuit ########################################

Partage des t�ches
* Mod�lisation de la base de donn�es. - Tous
* Gestion de GitHub. - Alexandre
* Gestion de Trello. - Emeline ?
* Gestion de .env et de .env.dist
* Gestion des routes et du fichier config/routes.yaml
* Cr�ation du squelette de l'application.  - Alexandre
* Cr�ation de formulaires ???
* Gestion de la landing page.
* Gestion de la charte graphique et du template base.html.twig.
* Gestion de la charte graphique du backoffice et du template admin.html.twig (� partir duquel les autres templates d'administration seront d�riv�s). 
* Gestion de 'membres', son template et son contr�leur.
* Gestion du 'show membre', son template et son contr�leur.

* Gestion de la page priv�e 'Profil'.
* Gestion de la s�curit�, et des formulaires d'inscription/connexion et des sessions.
* Gestion de l'upload d'images et de leur stockage. Aussi des ic�nes du site et des diff�rentes interfaces.
* Gestion de la messagerie.
* Gestion des likes.
* Gestion des cookies.
* Gestion des relations entre les tables et leurs contraintes, et de sa coh�rence avec l'application..

--- T�ches secondaires n�anmoins importantes ---
* V�rification de la coh�rence s�mantique.
* V�rification des liens.
* V�rification des ajouts, qu'il n'y ait pas de fichier pr�vu qui ne soit pas charg� dans chacune des pages. V�rifier �galement les <link> en mettant bien en prod la v�rification d'int�grit�.
* Recherche, cr�ation et installation d'images par d�faut.
* V�rification des espaces des noms.
* V�rification du bon fonctionnement de l'ensemble, et rapport de bugs.


--- S'il y a le temps ---
* Test psycho-astro-random-tarot-sophro-�rot�rico-analytique.
* Chat en temps r�el entre ceux qui sont connect�s.
* Galerie d'images.
* Test de majorit�.
* Statistiques � l'attention de l'administrateur.
* Edition des membres avec notamment la possibilit� de les bannir.
* Mise en ligne.
* Syst�me de privil�ges qui g�re la visibilit� es membres les uns par rapport aux autres. 
* ...
* Application Android.


Note : �tant donn� qu'il y a plusieurs fichiers sur lesquels plusieurs peuvent travailler, c'est peut-�tre une id�e de dire qu'un fichier donn� "appartient" � l'un de nous. De la sorte, si quelqu'un d'autre doit intervenir sur le fichier d'un autre, il s'assure aupr�s de lui qu'il ne travaille pas dessus � ce moment.



